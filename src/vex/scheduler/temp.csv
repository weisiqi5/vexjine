
" ~ThreadManager();"
" bool changeThreadStateToRunning(VexThreadState * state);"
" bool continueThread(VexThreadState *state);"
" bool isSignalledThreadGoingToSuspend(VexThreadState *state);"
" bool noThreadsToSchedule();"
" bool shouldCurrentThreadSuspend(VexThreadState * state);"
" bool suspendThread(VexThreadState * state);"
" int conditionalWakeup(VexThreadState * state);"
" int unconditionalWakeup();"
" int wakeup();"
" long long getCurrentGlobalTime();"
" std::string getStats();"
"void afterModelSimulation();"
"void blockCurrentThread(VexThreadState * state);""void  blockCurrentThread(VexThreadState *state);"
"void commitIoDuration(VexThreadState * state, const long long &actualIoDuration);"
"void end();"
"void interruptTimedOutIoThread(VexThreadState *state);"
"void interruptTimedWaitingThread(VexThreadState * state);"
"void locklessUpdateTimeBy(const long long &timeDiff, VexThreadState *state);"
"void notifySchedulerForVirtualizedTime(VexThreadState * state, const float &scalingFactor);"



"void onAnyReplacedWaitingInterrupt(VexThreadState *state, const long long &interruptionTime);""TOREMOVE"
"void onReplacedTimedWaiting(VexThreadState *state, const long &timeout);""void  onThreadContendedEntered(VexThreadState *state);"
"void onReplacedWaiting(VexThreadState *state);""void  onThreadInteractionPointEncounter(VexThreadState *state, const long long& startingTime);"
"void onThreadEnd(VexThreadState * state);""void  onThreadEnd(VexThreadState *state);"
"void onThreadSpawn(VexThreadState * state);""void  onThreadSpawn(VexThreadState *state);"
"void onThreadYield(VexThreadState * state, const long long & startingTime);""void  onThreadYield(VexThreadState *state, const long long &startingTime);"
"void onWrappedTimedWaitingEnd(VexThreadState *state);""void onWrappedTimedWaitingEnd(VexThreadState *state);""void  onThreadTimedWaitingEnd(VexThreadState *state, const long &interruptTime);"
"void onWrappedTimedWaitingInterrupt(VexThreadState *state, const long long &interruptionTime);""void onWrappedTimedWaitingInterrupt(VexThreadState *state, const long long &interruptionTime);"
"void onWrappedTimedWaitingStart(VexThreadState *state, const long &startingTime, const long &timeout);""void  onThreadTimedWaitingStart(VexThreadState *state, long &timeout);"
"void onWrappedWaitingEnd(VexThreadState *state, const long &startingTime);""void  onThreadWaitingEnd(VexThreadState *state);"
"void onWrappedWaitingInterrupt(VexThreadState *state, long interruptionTime);""void onWrappedWaitingInterrupt(VexThreadState *state, long interruptionTime);"
"void onWrappedWaitingStart(VexThreadState *state, const long &startingTime);""void  onThreadWaitingStart(const long long &startingTime, VexThreadState *state);"
"void registerSignalHandler();"
"void resumeThread(VexThreadState * state);"
"void setCurrentThreadVT(const long long &startingTime, VexThreadState *state);""void  setCurrentThreadVTLockless(const long long &startingTime, VexThreadState *state);"
"void setIoThread(VexThreadState * state, const bool &learning);""void  setIoThread(VexThreadState *state, bool learning);"
"void setNativeWaiting(VexThreadState * state);""void  setNativeWaiting(VexThreadState *state);"
"void setRunningThread(VexThreadState * state);""void  setRunningThread(VexThreadState *state);"
"void setSuspended(VexThreadState * state);"
"void setSuspendedAndPushToRunnables(VexThreadState * state);""void  setSuspendedAndPushToRunnables(VexThreadState *state);"
"void setSystemCallThread(VexThreadState *state);"
"void setTimedWaitingThread(VexThreadState * state);""void  setTimedWaitingThread(VexThreadState *state);"
"void setWaitingThread(VexThreadState * state);""void  setWaitingThread(VexThreadState *state);"
"void suspendCurrentThread(VexThreadState * state, const long long & startingTime, const char & options);""void  suspendCurrentThread(VexThreadState *state, const long long & startingTime, const char & options);"
"void suspendLooseCurrentThread(VexThreadState *state, const long long & startingTime);""void  suspendLooseCurrentThread(VexThreadState *state, const long long & startingTime);"
"void suspendRunningResumeNext();"
"void  updateCurrentThreadVT(VexThreadState *state);"
